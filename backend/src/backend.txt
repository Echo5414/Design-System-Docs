E:\Projekte\Coding\github\Design-System-Docs\backend\src\index.ts 
// import type { Core } from '@strapi/strapi';

export default {
  /**
   * An asynchronous register function that runs before
   * your application is initialized.
   *
   * This gives you an opportunity to extend code.
   */
  register(/* { strapi }: { strapi: Core.Strapi } */) {},

  /**
   * An asynchronous bootstrap function that runs before
   * your application gets started.
   *
   * This gives you an opportunity to set up your data model,
   * run jobs, or perform some special logic.
   */
  bootstrap(/* { strapi }: { strapi: Core.Strapi } */) {},
};
 
E:\Projekte\Coding\github\Design-System-Docs\backend\src\admin\vite.config.example.ts 
import { mergeConfig, type UserConfig } from 'vite';

export default (config: UserConfig) => {
  // Important: always return the modified config
  return mergeConfig(config, {
    resolve: {
      alias: {
        '@': '/src',
      },
    },
  });
};
 
E:\Projekte\Coding\github\Design-System-Docs\backend\src\api\github\controllers\github.ts 
// backend/src/api/github/controllers/github.ts
import type { Context } from 'koa';

interface CreateRepoBody {
  name: string;
  description?: string;
  private?: boolean;
  auto_init?: boolean;
}

interface GitHubErrorResponse {
  message: string;
  documentation_url?: string;
}

interface GitHubSuccessResponse {
  id: number;
  name: string;
  full_name: string;
  html_url: string;
}

export default {
  async createRepo(ctx: Context) {
    try {
      // Get the GitHub token from request header
      const githubToken = ctx.request.header['github-token'];
      
      if (!githubToken) {
        return ctx.unauthorized('No GitHub token provided');
      }

      const response = await fetch('https://api.github.com/user/repos', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${githubToken}`,
          Accept: 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(ctx.request.body as CreateRepoBody),
      });

      const data = await response.json() as GitHubSuccessResponse | GitHubErrorResponse;

      if (!response.ok) {
        const errorData = data as GitHubErrorResponse;
        return ctx.badRequest(errorData.message || 'Failed to create repository');
      }

      return { data: data as GitHubSuccessResponse };
    } catch (error) {
      console.error('Controller error:', error);
      const message = error instanceof Error ? error.message : 'Unknown error';
      return ctx.badRequest(message);
    }
  },
};
 
E:\Projekte\Coding\github\Design-System-Docs\backend\src\api\github\routes\github.ts 
// backend/src/api/github/routes/github.ts
export default {
  routes: [
    {
      method: 'POST',
      path: '/github/create-repo',
      handler: 'github.createRepo',
      config: {
        policies: [],
        middlewares: [],
        auth: {
          scope: ['plugin::users-permissions.user.me']
        },
      },
    },
  ],
};  
E:\Projekte\Coding\github\Design-System-Docs\backend\src\middlewares\auth.ts 
export default () => {
  return async (ctx, next) => {
    try {
      // Get the token from the authorization header
      const token = ctx.request.header.authorization?.replace('Bearer ', '');
      
      if (!token) {
        return ctx.unauthorized('No token provided');
      }

      // Verify and decode the token
      const verified = await strapi.plugins['users-permissions'].services.jwt.verify(token);
      
      // Get the user from the database
      const user = await strapi.query('plugin::users-permissions.user').findOne({
        where: { id: verified.id },
      });

      if (!user) {
        return ctx.unauthorized('User not found');
      }

      // Add user to state
      ctx.state.user = user;

      await next();
    } catch (err) {
      ctx.unauthorized('Invalid token');
    }
  };
};  
