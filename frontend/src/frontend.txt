E:\Projekte\Coding\github\Design-System-Docs\frontend\src\app.html 
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>
 
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\routes\+page.svelte 
<!-- frontend/src/routes/+page.svelte -->
<script lang="ts">
    import { onMount } from 'svelte';
  
    interface User {
        username: string;
        // Add other user properties as needed
    }
  
    let user: User | null = null;
    let loading = true;
    let isLoggingIn = false;
    let repoName = '';
    let isCreatingRepo = false;
  
    const handleGitHubLogin = () => {
      isLoggingIn = true;
      console.log('Starting GitHub login...');
      
      // Store the current URL as the return URL
      const returnUrl = encodeURIComponent(window.location.origin);
      const loginUrl = `http://localhost:1337/api/connect/github?returnTo=${returnUrl}`;
      
      console.log('Redirecting to:', loginUrl);
      window.location.href = loginUrl;
    };
  
    const handleLogout = () => {
      localStorage.removeItem('jwt');
      localStorage.removeItem('github_token');
      localStorage.removeItem('user');
      user = null;
    };
  
    const handleCreateRepo = async () => {
      if (!repoName) return;
      
      isCreatingRepo = true;
      try {
        const jwt = localStorage.getItem('jwt');
        const githubToken = localStorage.getItem('github_token');
        
        console.log('Tokens:', { 
          jwt: jwt ? 'present' : 'missing', 
          githubToken: githubToken ? 'present' : 'missing' 
        });
        
        if (!jwt || !githubToken) {
          throw new Error('Missing authentication tokens');
        }

        const response = await fetch('http://localhost:1337/api/github/create-repo', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${jwt}`,
            'GitHub-Token': githubToken,
          },
          body: JSON.stringify({
            name: repoName,
            description: 'Created via Design System Docs',
            private: false,
            auto_init: true
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error?.message || 'Failed to create repository');
        }

        const repo = await response.json();
        console.log('Repository created:', repo);
        repoName = '';
        alert('Repository created successfully!');
      } catch (error) {
        console.error('Error creating repository:', error);
        alert(error instanceof Error ? error.message : 'Failed to create repository');
      } finally {
        isCreatingRepo = false;
      }
    };
  
    onMount(() => {
      console.log('=== onMount ===');
      console.log('Full URL:', window.location.href);
      console.log('Search params:', window.location.search);
      
      // Check for tokens in URL (after GitHub redirect)
      const params = new URLSearchParams(window.location.search);
      const access_token = params.get('access_token');
      const jwt = params.get('jwt');
      const error = params.get('error');
      
      console.log('URL Parameters:', { 
        access_token: access_token ? 'present' : 'missing',
        jwt: jwt ? 'present' : 'missing',
        error
      });
      
      if (error) {
        console.error('Authentication error:', error);
        alert('Failed to authenticate with GitHub');
        window.history.replaceState({}, document.title, window.location.pathname);
        return;
      }
      
      if (access_token && jwt) {
        console.log('Storing tokens in localStorage');
        localStorage.setItem('github_token', access_token);
        localStorage.setItem('jwt', jwt);
        
        // Fetch user data first
        fetch('http://localhost:1337/api/users/me', {
          headers: {
            Authorization: `Bearer ${jwt}`,
          },
        })
        .then(res => res.json())
        .then(userData => {
          console.log('User data received:', userData);
          user = userData;
          localStorage.setItem('user', JSON.stringify(userData));
          // Only clear URL after storing everything
          window.history.replaceState({}, document.title, window.location.pathname);
        })
        .catch(error => {
          console.error('Error fetching user data:', error);
          window.history.replaceState({}, document.title, window.location.pathname);
        });
      } else {
        console.log('No tokens found in URL');
      }

      // Check for existing session
      const storedUser = localStorage.getItem('user');
      if (storedUser) {
        try {
          user = JSON.parse(storedUser);
          console.log('Restored user from localStorage:', user);
        } catch (e) {
          console.error('Error parsing stored user:', e);
          localStorage.removeItem('user');
        }
      }
      loading = false;
    });
  </script>
  
  <main class="container">
    <h1>Welcome to SvelteKit</h1>
    
    {#if loading}
      <p>Loading...</p>
    {:else if user}
      <div class="user-info">
        <p>Welcome, {user.username}!</p>
        
        <!-- Add repository creation form -->
        <div class="create-repo-form">
          <input
            type="text"
            bind:value={repoName}
            placeholder="Enter repository name"
            disabled={isCreatingRepo}
          />
          <button
            class="create-repo-button"
            on:click={handleCreateRepo}
            disabled={!repoName || isCreatingRepo}
          >
            {isCreatingRepo ? 'Creating...' : 'Create GitHub Repository'}
          </button>
        </div>

        <button class="logout-button" on:click={handleLogout}>
          Logout
        </button>
      </div>
    {:else}
      <button 
        class="github-button"
        on:click={handleGitHubLogin}
        disabled={isLoggingIn}
      >
        {isLoggingIn ? 'Connecting...' : 'Login with GitHub'}
      </button>
    {/if}
  </main>
  
  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
      text-align: center;
    }
  
    .github-button {
      background-color: #24292e;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 8px;
      margin-top: 20px;
      transition: background-color 0.2s;
      text-decoration: none;
    }
  
    .github-button:hover {
      background-color: #2f363d;
    }
  
    .user-info {
      margin-top: 20px;
    }
  
    .logout-button {
      background-color: #dc3545;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 10px;
    }
  
    .logout-button:hover {
      background-color: #c82333;
    }
  
    .create-repo-form {
      margin: 20px 0;
      display: flex;
      gap: 10px;
      justify-content: center;
    }
  
    .create-repo-form input {
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 200px;
    }
  
    .create-repo-button {
      background-color: #2ea44f;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
    }
  
    .create-repo-button:hover {
      background-color: #2c974b;
    }
  
    .create-repo-button:disabled {
      background-color: #94d3a2;
      cursor: not-allowed;
    }
  </style> 
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\routes\auth\callback\+page.svelte 
<script>
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';

  async function handleCallback() {
    try {
      const params = new URLSearchParams(window.location.search);
      const code = params.get('code');
      
      if (!code) {
        console.error('No code received');
        goto('/');
        return;
      }

      // Let Strapi handle the GitHub OAuth flow
      const response = await fetch(`http://localhost:1337/api/auth/github/callback?code=${code}`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Auth response:', data);

      if (data.jwt) {
        localStorage.setItem('jwt', data.jwt);
        localStorage.setItem('user', JSON.stringify(data.user));
        window.location.href = '/';
      } else {
        throw new Error('No JWT received');
      }
    } catch (error) {
      console.error('Authentication error:', error);
      goto('/');
    }
  }

  onMount(() => {
    handleCallback();
  });
</script>

<div class="loading">
  <p>Authenticating with GitHub...</p>
</div>

<style>
  .loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
</style>  
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\routes\connect\github\redirect\+page.svelte 
<script>
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';

  async function handleCallback() {
    try {
      const params = new URLSearchParams(window.location.search);
      const error = params.get('error');
      
      if (error) {
        console.error('GitHub auth error:', error);
        goto('/');
        return;
      }

      const accessToken = params.get('access_token');
      
      if (!accessToken) {
        console.error('No access token received');
        goto('/');
        return;
      }

      // Exchange the GitHub access token for a Strapi JWT
      const response = await fetch(`http://localhost:1337/api/auth/github/callback?access_token=${accessToken}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        console.error('Response status:', response.status);
        const errorText = await response.text();
        console.error('Error details:', errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Auth response:', data);

      if (data.jwt) {
        localStorage.setItem('jwt', data.jwt);
        localStorage.setItem('user', JSON.stringify(data.user));
        window.location.href = '/';
      } else {
        console.error('No JWT in response');
        goto('/');
      }
    } catch (error) {
      console.error('Authentication error:', error);
      goto('/');
    }
  }

  onMount(() => {
    handleCallback();
  });
</script>

<div class="loading">
  <p>Authenticating with GitHub...</p>
</div>

<style>
  .loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
</style>  
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\lib\auth.js 
export async function refreshToken() {
  const jwt = localStorage.getItem('jwt');
  if (!jwt) return;

  try {
    const response = await fetch('http://localhost:1337/api/token/refresh', {
      headers: {
        'Authorization': `Bearer ${jwt}`
      }
    });
    if (response.ok) {
      const data = await response.json();
      localStorage.setItem('jwt', data.jwt);
    }
  } catch (error) {
    console.error('Token refresh failed:', error);
  }
}  
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\app.d.ts 
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};
 
E:\Projekte\Coding\github\Design-System-Docs\frontend\src\lib\index.ts 
// place files you want to import through the `$lib` alias in this folder.
 
